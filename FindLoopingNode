package com.ds.practices;

import java.util.HashSet;

class LL {
	
	Node head;
	
	class Node {
		int data;
		Node next;
		
		Node(int data){
			this.data = data;
			this.next = null;
		}
	}
	
    //Function to check if the linked list has a loop.
    public boolean detectLoop(Node head){
        // Add code here
        if(head == null || head.next == null) {
            return false;
        }
        
        HashSet<Node> set = new HashSet<Node>();
        Node temp = head;
        while(temp.next != null) {
            temp = temp.next;
            if(set.contains(temp)) {
                return true;
            }
            
            set.add(temp);
        }
        
        return false;
    }
}

public class FindLoopingNode {

	public static void main(String[] args) {
		
		LL ll = new LL();
		LL.Node node1= ll.new Node(1);
		LL.Node node2= ll.new Node(2);
		LL.Node node3= ll.new Node(3);
		LL.Node node4= ll.new Node(4);
		
		ll.head = node1;
		node1.next = node2;
		node2.next = node3;
		node3.next = node4;
		node4.next = node2; //true
		
//		node4.next = null;//false
		
		boolean detectLoop = ll.detectLoop(ll.head);
		System.out.println("This LinkedList contains Loop: " + detectLoop);
	}
}
