package com.ds.concepts;

import java.util.LinkedList;
import java.util.Queue;

public class BinaryTreeUsingPreorder4 {
	
	public Node root;
	
	static class Node {
		public int data;
		public Node left;
		public Node right;
		
		public Node(int data) {
			super();
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}
	
	static int index = -1;
	
	public static Node createBinaryTree(int[] nodes) {
		
		if(nodes[++index] == -1) {
			return null;
		}
		
		Node rootNode = new Node(nodes[index]);
		rootNode.left = createBinaryTree(nodes);
		rootNode.right = createBinaryTree(nodes);
		
		return rootNode;
	}
	
	public static void preorderTraversal(Node root) {
		
		if(root == null) {
			return;
		}
		
		System.out.print(root.data + " ");
		preorderTraversal(root.left);
		preorderTraversal(root.right);
	}
	
	public static void inorderTraversal(Node root) {
		
		if(root == null) {
			return;
		}
		
		preorderTraversal(root.left);
		System.out.print(root.data + " ");
		preorderTraversal(root.right);
	}
	
	public static void postorderTraversal(Node root) {
		if(root == null) {
			return;
		}
		
		preorderTraversal(root.left);
		preorderTraversal(root.right);
		System.out.print(root.data + " ");
	}
	
	public static void levelorderTraversal(Node root) {
		Queue<Node> queue = new LinkedList<>();
		
		if(root == null)
			return;
		
		queue.add(root);
		queue.add(null);
		
		while(!queue.isEmpty()) {
			Node node = queue.poll();
			
			if(node == null) {
				System.out.println();
				if(queue.isEmpty()) {
					break;
				} else {
					queue.add(null);
				}
			} else {
				System.out.print(node.data + " ");
				if(node.left != null)
					queue.add(node.left);
				if(node.right != null)
					queue.add(node.right);
			}
		}
	}
	
	public static int countNodes(Node root) {
		if(root == null) {
			return 0;
		}
		
		int x = countNodes(root.left);
		int y = countNodes(root.right);
		
		return x + y + 1;
	}
	
	public static int sumOfNodes(Node root) {
		if(root == null) {
			return 0;
		}
		
		int leftSum = sumOfNodes(root.left);
		int rightSum = sumOfNodes(root.right);
		
		return leftSum + rightSum + root.data;
	}
	
	public static void main(String[] args) {
		Node root = createBinaryTree(new int []{1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1});
		
		System.out.println(root.data);
		preorderTraversal(root);
		System.out.println();
		inorderTraversal(root);
		System.out.println();
		postorderTraversal(root);
		System.out.println("\n======================Level Traversal=====================");
		levelorderTraversal(root);
		
		int countNodes = countNodes(root);
		System.out.println("Number of Nodes : " + countNodes);
		
		int sumOfNodes = sumOfNodes(root);
		System.out.println("Sum of Nodes : " + sumOfNodes);
	}

}
